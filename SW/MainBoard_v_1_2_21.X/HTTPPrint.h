/*********************************************************************
 * FileName: HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * Processor: PIC18,PIC24E, PIC24F, PIC24H, dsPIC30F, dsPIC33F, dsPIC33E,PIC32
 * Compiler:  Microchip C18, C30, C32
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 *
 * Software License Agreement
 *
 * Copyright (C) 2012 Microchip Technology Inc.  All rights
 * reserved.
 *
 * Microchip licenses to you the right to use, modify, copy, and 
  * distribute: 
 * (i)  the Software when embedded on a Microchip microcontroller or 
 *      digital signal controller product ("Device") which is 
 *      integrated into Licensee's product; or 
 * (ii) ONLY the Software driver source files ENC28J60.c, ENC28J60.h,
 *		ENCX24J600.c and ENCX24J600.h ported to a non-Microchip device
 *		used in conjunction with a Microchip ethernet controller for
 *		the sole purpose of interfacing with the ethernet controller.
 *
 * You should refer to the license agreement accompanying this 
 * Software for additional information regarding your rights and 
 * obligations.
 *
 * THE SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
 * BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE 
 * THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER 
 * SIMILAR COSTS, WHETHER ASSERTED ON THE BASIS OF CONTRACT, TORT
 * (INCLUDING NEGLIGENCE), BREACH OF WARRANTY, OR OTHERWISE.
 *
 *********************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)
extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_bv(void);
void HTTPPrint_state(WORD);
void HTTPPrint_cenable(WORD);
void HTTPPrint_debut(void);
void HTTPPrint_Op(void);
void HTTPPrint_Date(void);
void HTTPPrint_Heure(void);
void HTTPPrint_Machine(void);
void HTTPPrint_Montant(void);
void HTTPPrint_Key(void);
void HTTPPrint_etat(void);
void HTTPPrint_mac(void);
void HTTPPrint_buzzer(void);
void HTTPPrint_escrow(void);
void HTTPPrint_appoint(void);
void HTTPPrint_cumul(void);
void HTTPPrint_clavier(void);
void HTTPPrint_message(void);
void HTTPPrint_cg(void);
void HTTPPrint_intialisation(void);
void HTTPPrint_total(void);
void HTTPPrint_status(WORD);
void HTTPPrint_x60(void);
void HTTPPrint_x10(void);
void HTTPPrint_timeCentrale(void);
void HTTPPrint_machineList(void);
void HTTPPrint_BasePrice(void);
void HTTPPrint_KeyPrice(void);
void HTTPPrint_BasePriceHH(void);
void HTTPPrint_KeyPriceHH(void);
void HTTPPrint_Pulse(void);
void HTTPPrint_isRemaining(void);
void HTTPPrint_Displayed(void);
void HTTPPrint_OverBusy(void);
void HTTPPrint_Start(void);
void HTTPPrint_End(void);
void HTTPPrint_StartHH(void);
void HTTPPrint_EndHH(void);
void HTTPPrint_isCumul(void);
void HTTPPrint_Val(WORD);
void HTTPPrint_Lev(WORD);
void HTTPPrint_index(void);
void HTTPPrint_dir(void);
void HTTPPrint_cash(void);
void HTTPPrint_cashless(void);
void HTTPPrint_reload(void);
void HTTPPrint_refilling(void);
void HTTPPrint_troppercu(void);
void HTTPPrint_to_overpay(void);
void HTTPPrint_coinIn(WORD);
void HTTPPrint_coinOut(WORD);
void HTTPPrint_BillIn(WORD);
void HTTPPrint_sellUSB(void);
void HTTPPrint_nummch(void);
void HTTPPrint_numact(void);
void HTTPPrint_isPower(void);
void HTTPPrint_Sens(void);
void HTTPPrint_dspproperty(void);
void HTTPPrint_coinUsed(WORD);
void HTTPPrint_billUsed(WORD);
void HTTPPrint_isBill(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000001:
			HTTPPrint_bv();
			break;
        case 0x00000012:
			HTTPPrint_state(0);
			break;
        case 0x00000013:
			HTTPPrint_cenable(0);
			break;
        case 0x00000014:
			HTTPPrint_state(1);
			break;
        case 0x00000015:
			HTTPPrint_cenable(1);
			break;
        case 0x00000016:
			HTTPPrint_state(2);
			break;
        case 0x00000017:
			HTTPPrint_cenable(2);
			break;
        case 0x00000018:
			HTTPPrint_state(3);
			break;
        case 0x00000019:
			HTTPPrint_cenable(3);
			break;
        case 0x0000001a:
			HTTPPrint_state(4);
			break;
        case 0x0000001b:
			HTTPPrint_cenable(4);
			break;
        case 0x0000001c:
			HTTPPrint_state(5);
			break;
        case 0x0000001d:
			HTTPPrint_cenable(5);
			break;
        case 0x0000001e:
			HTTPPrint_state(6);
			break;
        case 0x0000001f:
			HTTPPrint_cenable(6);
			break;
        case 0x00000020:
			HTTPPrint_state(7);
			break;
        case 0x00000021:
			HTTPPrint_cenable(7);
			break;
        case 0x00000022:
			HTTPPrint_state(8);
			break;
        case 0x00000023:
			HTTPPrint_cenable(8);
			break;
        case 0x00000024:
			HTTPPrint_state(9);
			break;
        case 0x00000025:
			HTTPPrint_cenable(9);
			break;
        case 0x00000026:
			HTTPPrint_state(10);
			break;
        case 0x00000027:
			HTTPPrint_cenable(10);
			break;
        case 0x00000028:
			HTTPPrint_state(11);
			break;
        case 0x00000029:
			HTTPPrint_cenable(11);
			break;
        case 0x0000002a:
			HTTPPrint_state(12);
			break;
        case 0x0000002b:
			HTTPPrint_cenable(12);
			break;
        case 0x0000002c:
			HTTPPrint_state(13);
			break;
        case 0x0000002d:
			HTTPPrint_cenable(13);
			break;
        case 0x0000002e:
			HTTPPrint_state(14);
			break;
        case 0x0000002f:
			HTTPPrint_cenable(14);
			break;
        case 0x00000030:
			HTTPPrint_state(15);
			break;
        case 0x00000031:
			HTTPPrint_cenable(15);
			break;
        case 0x00000032:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000033:
			HTTPPrint_debut();
			break;
        case 0x00000034:
			HTTPPrint_Op();
			break;
        case 0x00000035:
			HTTPPrint_Date();
			break;
        case 0x00000036:
			HTTPPrint_Heure();
			break;
        case 0x00000037:
			HTTPPrint_Machine();
			break;
        case 0x00000038:
			HTTPPrint_Montant();
			break;
        case 0x00000039:
			HTTPPrint_Key();
			break;
        case 0x0000003b:
			HTTPPrint_etat();
			break;
        case 0x0000003c:
			HTTPPrint_mac();
			break;
        case 0x0000003d:
			HTTPPrint_buzzer();
			break;
        case 0x0000003e:
			HTTPPrint_escrow();
			break;
        case 0x0000003f:
			HTTPPrint_appoint();
			break;
        case 0x00000040:
			HTTPPrint_cumul();
			break;
        case 0x00000041:
			HTTPPrint_clavier();
			break;
        case 0x00000043:
			HTTPPrint_message();
			break;
        case 0x00000044:
			HTTPPrint_cg();
			break;
        case 0x00000045:
			HTTPPrint_intialisation();
			break;
        case 0x00000046:
			HTTPPrint_total();
			break;
        case 0x00000047:
			HTTPPrint_status(0);
			break;
        case 0x00000049:
			HTTPPrint_status(1);
			break;
        case 0x0000004b:
			HTTPPrint_status(2);
			break;
        case 0x0000004d:
			HTTPPrint_status(3);
			break;
        case 0x0000004f:
			HTTPPrint_status(4);
			break;
        case 0x00000051:
			HTTPPrint_status(5);
			break;
        case 0x00000053:
			HTTPPrint_status(6);
			break;
        case 0x00000055:
			HTTPPrint_status(7);
			break;
        case 0x00000057:
			HTTPPrint_status(8);
			break;
        case 0x00000059:
			HTTPPrint_status(9);
			break;
        case 0x0000005b:
			HTTPPrint_status(10);
			break;
        case 0x0000005d:
			HTTPPrint_status(11);
			break;
        case 0x0000005f:
			HTTPPrint_status(12);
			break;
        case 0x00000061:
			HTTPPrint_status(13);
			break;
        case 0x00000063:
			HTTPPrint_status(14);
			break;
        case 0x00000065:
			HTTPPrint_status(15);
			break;
        case 0x00000067:
			HTTPPrint_x60();
			break;
        case 0x00000068:
			HTTPPrint_x10();
			break;
        case 0x0000006a:
			HTTPPrint_timeCentrale();
			break;
        case 0x0000006c:
			HTTPPrint_machineList();
			break;
        case 0x0000006e:
			HTTPPrint_BasePrice();
			break;
        case 0x0000006f:
			HTTPPrint_KeyPrice();
			break;
        case 0x00000070:
			HTTPPrint_BasePriceHH();
			break;
        case 0x00000071:
			HTTPPrint_KeyPriceHH();
			break;
        case 0x00000072:
			HTTPPrint_Pulse();
			break;
        case 0x00000073:
			HTTPPrint_isRemaining();
			break;
        case 0x00000075:
			HTTPPrint_Displayed();
			break;
        case 0x00000076:
			HTTPPrint_OverBusy();
			break;
        case 0x00000077:
			HTTPPrint_Start();
			break;
        case 0x00000078:
			HTTPPrint_End();
			break;
        case 0x00000079:
			HTTPPrint_StartHH();
			break;
        case 0x0000007a:
			HTTPPrint_EndHH();
			break;
        case 0x0000007b:
			HTTPPrint_isCumul();
			break;
        case 0x0000007d:
			HTTPIncFile((ROM BYTE*)"canal.inc");
			break;
        case 0x0000007e:
			HTTPPrint_Val(0);
			break;
        case 0x0000007f:
			HTTPPrint_Val(1);
			break;
        case 0x00000080:
			HTTPPrint_Val(2);
			break;
        case 0x00000081:
			HTTPPrint_Val(3);
			break;
        case 0x00000082:
			HTTPPrint_Val(4);
			break;
        case 0x00000083:
			HTTPPrint_Val(5);
			break;
        case 0x00000084:
			HTTPPrint_Val(6);
			break;
        case 0x00000085:
			HTTPPrint_Val(7);
			break;
        case 0x00000086:
			HTTPPrint_Val(8);
			break;
        case 0x00000087:
			HTTPPrint_Val(9);
			break;
        case 0x00000088:
			HTTPPrint_Val(10);
			break;
        case 0x00000089:
			HTTPPrint_Val(11);
			break;
        case 0x0000008a:
			HTTPPrint_Val(12);
			break;
        case 0x0000008b:
			HTTPPrint_Val(13);
			break;
        case 0x0000008c:
			HTTPPrint_Val(14);
			break;
        case 0x0000008d:
			HTTPPrint_Val(15);
			break;
        case 0x0000008e:
			HTTPPrint_Lev(0);
			break;
        case 0x0000008f:
			HTTPPrint_Lev(1);
			break;
        case 0x00000090:
			HTTPPrint_Lev(2);
			break;
        case 0x00000091:
			HTTPPrint_Lev(3);
			break;
        case 0x00000092:
			HTTPPrint_Lev(4);
			break;
        case 0x00000093:
			HTTPPrint_Lev(5);
			break;
        case 0x00000094:
			HTTPPrint_Lev(6);
			break;
        case 0x00000095:
			HTTPPrint_Lev(7);
			break;
        case 0x00000096:
			HTTPPrint_Lev(8);
			break;
        case 0x00000097:
			HTTPPrint_Lev(9);
			break;
        case 0x00000098:
			HTTPPrint_Lev(10);
			break;
        case 0x00000099:
			HTTPPrint_Lev(11);
			break;
        case 0x0000009a:
			HTTPPrint_Lev(12);
			break;
        case 0x0000009b:
			HTTPPrint_Lev(13);
			break;
        case 0x0000009c:
			HTTPPrint_Lev(14);
			break;
        case 0x0000009d:
			HTTPPrint_Lev(15);
			break;
        case 0x0000009e:
			HTTPPrint_index();
			break;
        case 0x0000009f:
			HTTPPrint_dir();
			break;
        case 0x000000b0:
			HTTPPrint_cash();
			break;
        case 0x000000b1:
			HTTPPrint_cashless();
			break;
        case 0x000000b2:
			HTTPPrint_reload();
			break;
        case 0x000000b3:
			HTTPPrint_refilling();
			break;
        case 0x000000b7:
			HTTPPrint_troppercu();
			break;
        case 0x000000b8:
			HTTPPrint_to_overpay();
			break;
        case 0x000000b9:
			HTTPPrint_coinIn(0);
			break;
        case 0x000000ba:
			HTTPPrint_coinIn(1);
			break;
        case 0x000000bb:
			HTTPPrint_coinIn(2);
			break;
        case 0x000000bc:
			HTTPPrint_coinIn(3);
			break;
        case 0x000000bd:
			HTTPPrint_coinIn(4);
			break;
        case 0x000000be:
			HTTPPrint_coinIn(5);
			break;
        case 0x000000bf:
			HTTPPrint_coinIn(6);
			break;
        case 0x000000c0:
			HTTPPrint_coinIn(7);
			break;
        case 0x000000c1:
			HTTPPrint_coinIn(8);
			break;
        case 0x000000c2:
			HTTPPrint_coinIn(9);
			break;
        case 0x000000c3:
			HTTPPrint_coinIn(10);
			break;
        case 0x000000c4:
			HTTPPrint_coinIn(11);
			break;
        case 0x000000c5:
			HTTPPrint_coinIn(12);
			break;
        case 0x000000c6:
			HTTPPrint_coinIn(13);
			break;
        case 0x000000c7:
			HTTPPrint_coinIn(14);
			break;
        case 0x000000c8:
			HTTPPrint_coinIn(15);
			break;
        case 0x000000c9:
			HTTPPrint_coinOut(0);
			break;
        case 0x000000ca:
			HTTPPrint_coinOut(1);
			break;
        case 0x000000cb:
			HTTPPrint_coinOut(2);
			break;
        case 0x000000cc:
			HTTPPrint_coinOut(3);
			break;
        case 0x000000cd:
			HTTPPrint_coinOut(4);
			break;
        case 0x000000ce:
			HTTPPrint_coinOut(5);
			break;
        case 0x000000cf:
			HTTPPrint_coinOut(6);
			break;
        case 0x000000d0:
			HTTPPrint_coinOut(7);
			break;
        case 0x000000d1:
			HTTPPrint_coinOut(8);
			break;
        case 0x000000d2:
			HTTPPrint_coinOut(9);
			break;
        case 0x000000d3:
			HTTPPrint_coinOut(10);
			break;
        case 0x000000d4:
			HTTPPrint_coinOut(11);
			break;
        case 0x000000d5:
			HTTPPrint_coinOut(12);
			break;
        case 0x000000d6:
			HTTPPrint_coinOut(13);
			break;
        case 0x000000d7:
			HTTPPrint_coinOut(14);
			break;
        case 0x000000d8:
			HTTPPrint_coinOut(15);
			break;
        case 0x000000d9:
			HTTPPrint_BillIn(0);
			break;
        case 0x000000da:
			HTTPPrint_BillIn(1);
			break;
        case 0x000000db:
			HTTPPrint_BillIn(2);
			break;
        case 0x000000dc:
			HTTPPrint_BillIn(3);
			break;
        case 0x000000dd:
			HTTPPrint_BillIn(4);
			break;
        case 0x000000de:
			HTTPPrint_BillIn(5);
			break;
        case 0x000000df:
			HTTPPrint_BillIn(6);
			break;
        case 0x000000e0:
			HTTPPrint_BillIn(7);
			break;
        case 0x000000e1:
			HTTPPrint_BillIn(8);
			break;
        case 0x000000e2:
			HTTPPrint_BillIn(9);
			break;
        case 0x000000e3:
			HTTPPrint_BillIn(10);
			break;
        case 0x000000e4:
			HTTPPrint_BillIn(11);
			break;
        case 0x000000e5:
			HTTPPrint_BillIn(12);
			break;
        case 0x000000e6:
			HTTPPrint_BillIn(13);
			break;
        case 0x000000e7:
			HTTPPrint_BillIn(14);
			break;
        case 0x000000e8:
			HTTPPrint_BillIn(15);
			break;
        case 0x000000e9:
			HTTPPrint_sellUSB();
			break;
        case 0x000000ea:
			HTTPPrint_nummch();
			break;
        case 0x000000eb:
			HTTPPrint_numact();
			break;
        case 0x000000ec:
			HTTPPrint_isPower();
			break;
        case 0x000000ed:
			HTTPPrint_Sens();
			break;
        case 0x000000ee:
			HTTPPrint_dspproperty();
			break;
        case 0x000000ef:
			HTTPPrint_coinUsed(0);
			break;
        case 0x000000f0:
			HTTPPrint_coinUsed(1);
			break;
        case 0x000000f1:
			HTTPPrint_coinUsed(2);
			break;
        case 0x000000f2:
			HTTPPrint_coinUsed(3);
			break;
        case 0x000000f3:
			HTTPPrint_coinUsed(4);
			break;
        case 0x000000f4:
			HTTPPrint_coinUsed(5);
			break;
        case 0x000000f5:
			HTTPPrint_coinUsed(6);
			break;
        case 0x000000f6:
			HTTPPrint_coinUsed(7);
			break;
        case 0x000000f7:
			HTTPPrint_coinUsed(8);
			break;
        case 0x000000f8:
			HTTPPrint_coinUsed(9);
			break;
        case 0x000000f9:
			HTTPPrint_coinUsed(10);
			break;
        case 0x000000fa:
			HTTPPrint_coinUsed(11);
			break;
        case 0x000000fb:
			HTTPPrint_coinUsed(12);
			break;
        case 0x000000fc:
			HTTPPrint_coinUsed(13);
			break;
        case 0x000000fd:
			HTTPPrint_coinUsed(14);
			break;
        case 0x000000fe:
			HTTPPrint_coinUsed(15);
			break;
        case 0x0000010f:
			HTTPPrint_billUsed(0);
			break;
        case 0x00000110:
			HTTPPrint_billUsed(1);
			break;
        case 0x00000111:
			HTTPPrint_billUsed(2);
			break;
        case 0x00000112:
			HTTPPrint_billUsed(3);
			break;
        case 0x00000113:
			HTTPPrint_billUsed(4);
			break;
        case 0x00000114:
			HTTPPrint_billUsed(5);
			break;
        case 0x00000115:
			HTTPPrint_billUsed(6);
			break;
        case 0x00000116:
			HTTPPrint_billUsed(7);
			break;
        case 0x00000117:
			HTTPPrint_billUsed(8);
			break;
        case 0x00000118:
			HTTPPrint_billUsed(9);
			break;
        case 0x00000119:
			HTTPPrint_billUsed(10);
			break;
        case 0x0000011a:
			HTTPPrint_billUsed(11);
			break;
        case 0x0000011b:
			HTTPPrint_billUsed(12);
			break;
        case 0x0000011c:
			HTTPPrint_billUsed(13);
			break;
        case 0x0000011d:
			HTTPPrint_billUsed(14);
			break;
        case 0x0000011e:
			HTTPPrint_billUsed(15);
			break;
        case 0x0000011f:
			HTTPPrint_isBill();
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
